第一步绑定账号
$ git config --global user.name "Your Name"
$ git config --global user.email "email@example.com"
第二步本地git库
1.新建文件夹作为git的仓库	
2.$ git init
3.添加任意类型文件到git仓库		($git status看当前仓库的状态)
$git add 文件名.后缀名		（创建或者是修改）
$ git commit -m "wrote a readme file"	（提交）
第三步设置远程库绑定到本地库
注册GitHub账号
创建SSH Key	$ ssh-keygen -t rsa -C "youremail@example.com"
GitHub设置Key文本框里粘贴id_rsa.pub文件的内容
创建远程库Repository name 填本地git仓库文件夹名
$ git remote add origin git@github.com: （GitHub账号名）/（创建的库名）.git
$ git push -u origin master	（修改本地库的文件然后上传到GitHub）(第一次推送加 -u 警告选择yes)
第四步修改(重复第二步)







ls 	显示当前目录下文件
ls -a	显示当前目录下包括隐藏文件(ls -ah同样的效果)
ls -l	显示所有文件详细信息
cd ..	返回上一级
cd /	返回到根目录
git init 	创建git管理的初始库，并自动添加.git目录
git add 文件名.后缀名		添加文件到git仓库	(git add 文件名.后缀名   文件名.后缀名   文件名.后缀名 可以同时添加多个文件)
git commit	告诉git，把文件提交到仓库

git status 只列出变动的文件
git add 登记文件变动到文件名册
git rm 从文件名册中注销该文件，并删除工作区文件（delete）
git rm --cached 只从文件名册中注销该文件
git restore --staged  是若干次add、rm --cached的逆向回退操作，撤销之前的登记操作**，**直到最近一次的commit 提交。
git restore 撤销工作区未登记的文件的删除、修改和创建（撤销会使新创建的文件处于Untracked的状态，但不会删除该文件），直到最近一次的登记。
git restore 撤销工作区已登记的文件的删除、修改，直到最近一次的登记。
git restore --staged 是若干次add、rm --cached的逆向回退操作，撤销之前的登记操作，直到最近一次的commit 提交，被注销的文件处于Untracked的状态，但文件不会被删除


一、安装
安装完成之后绑定账号
$ git config --global user.name "Your Name"
$ git config --global user.email "email@example.com"
使用git config --list命令就能看到所有的设置

二、使用
1.先新建一个文件夹作为git的初始库	
2.使用git init 创建初始库	$ git init
3.添加任意类型的文件到git仓库时，都要把文件放到创建好的git仓库目录下	
$git add 文件名.后缀名		（创建或者是修改）
$ git commit -m "wrote a readme file"	（提交）

三、远程
1:注册GitHub账号
2：创建SSH Key。在用户主(user/用户名)目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。
如果没有  >  打开Git Bash  >  创建SSH Key：$ ssh-keygen -t rsa -C "youremail@example.com"

3：打开github  >  settings(设置)  >  SSH Keys  >  Add SSH Key  >  填上任意Title  >  Key文本框里粘贴id_rsa.pub文件的内容：(找到id_rsa.pub文件，用记事本方式打开文件，复制内容，然后粘贴)

4:添加远程库 右上角+号  >  New repository  >  Repository name 填本地git仓库文件夹名（study），其他默认，点Create repository 创建
$ git remote add origin git@github.com: michaelliao /learngit.git	(把michaelliao替换成自己的GitHub账户名) 	（在本地库上使用命令git remote add把它和Gitee的远程库关联）
$ git push -u origin master	（第一次推送，需要加上 -u  最后警告选择yes）后面推送 $ git push origin master	（修改然后推送）

5.删除远程库：如果添加时，地址写错，或者就是想删除远程库，可以用git remote rm <name>命令。使用前，建议先用git remote -v查看远程库信息：
												$ git remote -v
												origin  git@github.com:ayededai/study.git (fetch)
												origin  git@github.com:ayededai/study.git (push)
然后，根据名字删除，比如删除origin：
$ git remote rm origin
删除是解除本地和远程的绑定关系，不是物理上删除远程库。要删除，登录到GitHub，后台删除。
总结
要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；（$ git remote add origin git@github.com: michaelliao /learngit.git）
关联一个远程库时必须给远程库指定一个名字，origin是默认习惯命名；
关联后，使用命令git push -u origin master第一次推送master分支的所有内容；
此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；

6从远程库克隆
GitHub给出的地址不止一个，还可以用https://github.com/michaelliao/gitskills.git这样的地址。实际上，Git支持多种协议，默认的git://使用ssh，但也可以使用https等其他协议。
使用https除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令，但是在某些只开放http端口的公司内部就无法使用ssh协议而只能用https。
小结
要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。
Git支持多种协议，包括https，但ssh协议速度最快。

7时光机穿梭
修改readme.txt文件，运行git status命令看看结果。记不清上次怎么修改的readme.txt，用git diff命令
提交到仓库，第一步git add	($ git add readme.txt     运行git status看看当前仓库的状态)
第二步git commit	($ git commit -m "add distributed  再用git status命令看看仓库的当前状态：)